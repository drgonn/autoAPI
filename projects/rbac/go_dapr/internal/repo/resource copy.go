        f_list.append(f'// @Title  resource.go\n')
        f_list.append(f'// @Description  资源控制器定义以及初始化\n')
        f_list.append(f'// @Author	rong	2022/02/28\n')
        f_list.append(f'// @Update\n')
        f_list.append(f'package controllers\n')
        f_list.append(f'\n')
        f_list.append(f'import (\n')
        f_list.append(f'	"nec-api/internal/forms"\n')
        f_list.append(f'	"nec-api/internal/repo"\n')
        f_list.append(f'	"nec-api/internal/response"\n')
        f_list.append(f'	"net/http"\n')
        f_list.append(f'	"strconv"\n')
        f_list.append(f'\n')
        f_list.append(f'	"github.com/google/wire"\n')
        f_list.append(f'\n')
        f_list.append(f'	"github.com/gin-gonic/gin"\n')
        f_list.append(f')\n')
        f_list.append(f'\n')
        f_list.append(f'//ResourceController 资源控制器\n')
        f_list.append(f'type ResourceController struct {{\n')
        f_list.append(f'	repo repo.IResourceRepo\n')
        f_list.append(f'}}\n')
        f_list.append(f'\n')
        f_list.append(f'// 资源控制器接口\n')
        f_list.append(f'type IResourceController interface{{}}\n')
        f_list.append(f'\n')
        f_list.append(f'var ResourceControllerProviderSet = wire.NewSet(NewResourceController, wire.Bind(new(IResourceController), new(*ResourceController)))\n')
        f_list.append(f'\n')
        f_list.append(f'// @title	NewResourceController\n')
        f_list.append(f'// @description	初始化资源控制器\n')
        f_list.append(f'// @author	rong	2022/02/28\n')
        f_list.append(f'// @param	repo interface 资源接口类\n')
        f_list.append(f'// @return  *ResourceController interface 资源类\n')
        f_list.append(f'func NewResourceController(repo repo.IResourceRepo) *ResourceController {{\n')
        f_list.append(f'	return &ResourceController{{\n')
        f_list.append(f'		repo: repo,\n')
        f_list.append(f'	}}\n')
        f_list.append(f'}}\n')
        f_list.append(f'\n')
        f_list.append(f'// @title	Create\n')
        f_list.append(f'// @description	创建资源\n')
        f_list.append(f'// @author	rong	2022/02/28\n')
        f_list.append(f'// @param	form forms.ResourceCreateForm 创建资源表单参数\n')
        f_list.append(f'// @return  json 创建成功信息\n')
        f_list.append(f'func (ctl *ResourceController) Create(c *gin.Context) {{\n')
        f_list.append(f'	var form forms.ResourceCreateForm\n')
        f_list.append(f'	err := c.ShouldBindJSON(&form)\n')
        f_list.append(f'	if err != nil {{\n')
        f_list.append(f'		c.JSON(http.StatusOK, response.NewResponseMessage(response.ParamBindError, err.Error()))\n')
        f_list.append(f'		return\n')
        f_list.append(f'	}}\n')
        f_list.append(f'\n')
        f_list.append(f'	err = ctl.repo.Create(form)\n')
        f_list.append(f'	if err != nil {{\n')
        f_list.append(f'		c.JSON(http.StatusOK, response.NewResponseMessage(response.CreateError, err.Error()))\n')
        f_list.append(f'		return\n')
        f_list.append(f'	}}\n')
        f_list.append(f'\n')
        f_list.append(f'	c.JSON(http.StatusOK, response.ResponseSuccess())\n')
        f_list.append(f'}}\n')
        f_list.append(f'\n')
        f_list.append(f'// @title	Update\n')
        f_list.append(f'// @description	修改资源\n')
        f_list.append(f'// @author	rong	2022/03/01\n')
        f_list.append(f'// @param	form forms.ResourceUpdateForm 修改资源表单参数\n')
        f_list.append(f'//          id int 要修改的资源ID\n')
        f_list.append(f'// @return  json 修改成功信息\n')
        f_list.append(f'func (ctl *ResourceController) Update(c *gin.Context) {{\n')
        f_list.append(f'	idstr := c.Param("id")\n')
        f_list.append(f'	id, err := strconv.Atoi(idstr)\n')
        f_list.append(f'	if err != nil {{\n')
        f_list.append(f'		c.JSON(http.StatusOK, response.NewResponse(response.InvalidRequest))\n')
        f_list.append(f'		return\n')
        f_list.append(f'	}}\n')
        f_list.append(f'\n')
        f_list.append(f'	var form forms.ResourceUpdateForm\n')
        f_list.append(f'	err = c.ShouldBindJSON(&form)\n')
        f_list.append(f'	if err != nil {{\n')
        f_list.append(f'		c.JSON(http.StatusOK, response.NewResponseMessage(response.ParamBindError, err.Error()))\n')
        f_list.append(f'		return\n')
        f_list.append(f'	}}\n')
        f_list.append(f'\n')
        f_list.append(f'	err = ctl.repo.Update(id, form)\n')
        f_list.append(f'	if err != nil {{\n')
        f_list.append(f'		c.JSON(http.StatusOK, response.NewResponseMessage(response.UpdateError, err.Error()))\n')
        f_list.append(f'		return\n')
        f_list.append(f'	}}\n')
        f_list.append(f'\n')
        f_list.append(f'	c.JSON(http.StatusOK, response.ResponseSuccess())\n')
        f_list.append(f'}}\n')
        f_list.append(f'\n')
        f_list.append(f'// @title	Get\n')
        f_list.append(f'// @description	获取某个资源\n')
        f_list.append(f'// @author	rong	2022/03/02\n')
        f_list.append(f'// @param	id int 要修改的资源ID\n')
        f_list.append(f'// @return  json 成功信息和资源详情\n')
        f_list.append(f'func (ctl *ResourceController) Get(c *gin.Context) {{\n')
        f_list.append(f'	idStr := c.Param("id")\n')
        f_list.append(f'	id, err := strconv.Atoi(idStr)\n')
        f_list.append(f'	if err != nil {{\n')
        f_list.append(f'		c.JSON(http.StatusOK, response.NewResponse(response.InvalidRequest))\n')
        f_list.append(f'		return\n')
        f_list.append(f'	}}\n')
        f_list.append(f'\n')
        f_list.append(f'	resource, err := ctl.repo.Get(id)\n')
        f_list.append(f'	if err != nil {{\n')
        f_list.append(f'		c.JSON(http.StatusOK, response.NewResponseMessage(response.GetError, err.Error()))\n')
        f_list.append(f'		return\n')
        f_list.append(f'	}}\n')
        f_list.append(f'\n')
        f_list.append(f'	c.JSON(http.StatusOK, response.NewResponseData(response.Success, resource))\n')
        f_list.append(f'}}\n')
        f_list.append(f'\n')
        f_list.append(f'// @title	List\n')
        f_list.append(f'// @description	获取资源列表\n')
        f_list.append(f'// @author	rong	2022/03/02\n')
        f_list.append(f'// @param	query forms.Resource 分页请求参数表单\n')
        f_list.append(f'// @return  json 成功信息和资源分页列表\n')
        f_list.append(f'func (ctl *ResourceController) List(c *gin.Context) {{\n')
        f_list.append(f'	var query forms.ResourceQuery\n')
        f_list.append(f'	err := c.ShouldBindQuery(&query)\n')
        f_list.append(f'	if err != nil {{\n')
        f_list.append(f'		c.JSON(http.StatusOK, response.NewResponseMessage(response.ParamBindError, err.Error()))\n')
        f_list.append(f'		return\n')
        f_list.append(f'	}}\n')
        f_list.append(f'\n')
        f_list.append(f'	if query.PerPage < 1 {{\n')
        f_list.append(f'		query.PerPage = 20\n')
        f_list.append(f'	}}\n')
        f_list.append(f'\n')
        f_list.append(f'	if query.Current < 1 {{\n')
        f_list.append(f'		query.Current = 1\n')
        f_list.append(f'	}}\n')
        f_list.append(f'\n')
        f_list.append(f'	total, resources, err := ctl.repo.List(query)\n')
        f_list.append(f'	if err != nil {{\n')
        f_list.append(f'		c.JSON(http.StatusOK, response.NewResponseMessage(response.GetError, err.Error()))\n')
        f_list.append(f'		return\n')
        f_list.append(f'	}}\n')
        f_list.append(f'\n')
        f_list.append(f'	size := len(resources)\n')
        f_list.append(f'\n')
        f_list.append(f'	res := response.NewResponseData(response.Success, resources)\n')
        f_list.append(f'	res.Total = &total\n')
        f_list.append(f'	res.Current = query.Current\n')
        f_list.append(f'	res.PerPage = query.PerPage\n')
        f_list.append(f'	res.Size = &size\n')
        f_list.append(f'	c.JSON(http.StatusOK, res)\n')
        f_list.append(f'}}\n')
        f_list.append(f'\n')
        f_list.append(f'// @title	Delete\n')
        f_list.append(f'// @description	删除资源\n')
        f_list.append(f'// @author	rong	2022/02/11	18:16\n')
        f_list.append(f'// @param	form forms.DeleteIds 要删除的资源ID列表表单\n')
        f_list.append(f'// @return  json 删除成功信息\n')
        f_list.append(f'func (ctl *ResourceController) Delete(c *gin.Context) {{\n')
        f_list.append(f'	var form forms.DeleteIds\n')
        f_list.append(f'	err := c.ShouldBindJSON(&form)\n')
        f_list.append(f'	if err != nil {{\n')
        f_list.append(f'		c.JSON(http.StatusOK, response.NewResponseMessage(response.CreateError, err.Error()))\n')
        f_list.append(f'		return\n')
        f_list.append(f'	}}\n')
        f_list.append(f'\n')
        f_list.append(f'	err = c.ShouldBindJSON(&form)\n')
        f_list.append(f'	if err != nil {{\n')
        f_list.append(f'		c.JSON(http.StatusOK, response.NewResponseMessage(response.ParamBindError, err.Error()))\n')
        f_list.append(f'		return\n')
        f_list.append(f'	}}\n')
        f_list.append(f'\n')
        f_list.append(f'	err = ctl.repo.Delete(form.Ids)\n')
        f_list.append(f'	if err != nil {{\n')
        f_list.append(f'		c.JSON(http.StatusOK, response.NewResponseMessage(response.DeleteError, err.Error()))\n')
        f_list.append(f'		return\n')
        f_list.append(f'	}}\n')
        f_list.append(f'	c.JSON(http.StatusOK, response.ResponseSuccess())\n')
        f_list.append(f'}}\n')
        f_list.append(f'\n')



		
        f_list.append(f'// @Title  resource.go\n')
        f_list.append(f'// @Description  资源初始化\n')
        f_list.append(f'// @Autor: rong	2022/02/28\n')
        f_list.append(f'// @Update:\n')
        f_list.append(f'package repo\n')
        f_list.append(f'\n')
        f_list.append(f'import (\n')
        f_list.append(f'	"encoding/json"\n')
        f_list.append(f'	"errors"\n')
        f_list.append(f'	"fmt"\n')
        f_list.append(f'	"nec-api/internal/database"\n')
        f_list.append(f'	"nec-api/internal/forms"\n')
        f_list.append(f'	"strings"\n')
        f_list.append(f'	"time"\n')
        f_list.append(f'\n')
        f_list.append(f'	"dev.azure.com/netkit/unknown/gokit.git/logger"\n')
        f_list.append(f'	"github.com/google/wire"\n')
        f_list.append(f')\n')
        f_list.append(f'\n')
        f_list.append(f'type ResourceRepo struct {{\n')
        f_list.append(f'	db database.IDaprMysqlClient\n')
        f_list.append(f'}}\n')
        f_list.append(f'\n')
        f_list.append(f'type IResourceRepo interface {{\n')
        f_list.append(f'	Create(form forms.ResourceCreateForm) error\n')
        f_list.append(f'	Update(id int, form forms.ResourceUpdateForm) error\n')
        f_list.append(f'	Get(id int) (*Resource, error)\n')
        f_list.append(f'	List(query forms.ResourceQuery) (int, []Resource, error)\n')
        f_list.append(f'	Delete(ids []uint) error\n')
        f_list.append(f'}}\n')
        f_list.append(f'\n')
        f_list.append(f'var ResourceRepoProviderSet = wire.NewSet(NewResourceRepo, wire.Bind(new(IResourceRepo), new(*ResourceRepo)))\n')
        f_list.append(f'\n')
        f_list.append(f'func NewResourceRepo(db database.IDaprMysqlClient) *ResourceRepo {{\n')
        f_list.append(f'	return &ResourceRepo{{\n')
        f_list.append(f'		db: db,\n')
        f_list.append(f'	}}\n')
        f_list.append(f'}}\n')
        f_list.append(f'\n')
        f_list.append(f'// Resource 权限资源结构\n')
        f_list.append(f'type Resource struct {{\n')
        f_list.append(f'	Id          uint        `json:"id"`\n')
        f_list.append(f'	Name        string      `json:"name"`\n')
        f_list.append(f'	Description string      `json:"description"`\n')
        f_list.append(f'	Action      interface{{}} `json:"action"`\n')
        f_list.append(f'	Updatedat   *time.Time  `json:"updatedat"`\n')
        f_list.append(f'	Createdat   *time.Time  `json:"createdat"`\n')
        f_list.append(f'}}\n')
        f_list.append(f'\n')
        f_list.append(f'// @title: Create\n')
        f_list.append(f'// @description: 插入资源表一条数据\n')
        f_list.append(f'// @author: rong 2022/02/28\n')
        f_list.append(f'// @param: from froms.ResourceCreateForm 资源创建表单\n')
        f_list.append(f'// @return err error 错误或者无错误就是成功\n')
        f_list.append(f'func (r *ResourceRepo) Create(form forms.ResourceCreateForm) error {{\n')
        f_list.append(f'	data, err := json.Marshal(form.Action)\n')
        f_list.append(f'	if err != nil {{\n')
        f_list.append(f'		return err\n')
        f_list.append(f'	}}\n')
        f_list.append(f'	var action string = string(data)\n')
        f_list.append(f'	if action == "null" {{\n')
        f_list.append(f'		action = "{{}}"\n')
        f_list.append(f'	}}\n')
        f_list.append(f'\n')
        f_list.append(f'	sqlStr := fmt.Sprintf("insert into resources ( `name`, `description`, `action`) values ('%s' ,'%s' ,'%s' )", form.Name, form.Description, action)\n')
        f_list.append(f'	logger.Debug("sql string: ", sqlStr)\n')
        f_list.append(f'\n')
        f_list.append(f'	if _, err := r.db.Exec(sqlStr); err != nil {{\n')
        f_list.append(f'		logger.Error(err)\n')
        f_list.append(f'		return err\n')
        f_list.append(f'	}}\n')
        f_list.append(f'	return nil\n')
        f_list.append(f'}}\n')
        f_list.append(f'\n')
        f_list.append(f'// @title: Update\n')
        f_list.append(f'// @description: 插入资源表一条数据\n')
        f_list.append(f'// @author: rong 2022/03/01\n')
        f_list.append(f'// @param: id int 资源ID\n')
        f_list.append(f'//         from froms.ResourceUpdateForm 资源修改表单\n')
        f_list.append(f'// @return err error 错误或者无错误就是成功\n')
        f_list.append(f'func (r *ResourceRepo) Update(id int, form forms.ResourceUpdateForm) error {{\n')
        f_list.append(f'	var build strings.Builder\n')
        f_list.append(f'	build.WriteString("UPDATE `resources` SET ")\n')
        f_list.append(f'\n')
        f_list.append(f'	var sqlvals []string\n')
        f_list.append(f'\n')
        f_list.append(f'	if 0 < len(form.Description) {{\n')
        f_list.append(f'		sqlvals = append(sqlvals, fmt.Sprintf(" `description` = '%s' ", form.Description))\n')
        f_list.append(f'	}}\n')
        f_list.append(f'\n')
        f_list.append(f'	data, err := json.Marshal(form.Action)\n')
        f_list.append(f'	if err != nil {{\n')
        f_list.append(f'		return err\n')
        f_list.append(f'	}}\n')
        f_list.append(f'	var action string = string(data)\n')
        f_list.append(f'	if action == "null" {{\n')
        f_list.append(f'		action = "{{}}"\n')
        f_list.append(f'	}}\n')
        f_list.append(f'	sqlvals = append(sqlvals, fmt.Sprintf(" `action` = '%s' ", action))\n')
        f_list.append(f'\n')
        f_list.append(f'	if len(sqlvals) == 0 {{\n')
        f_list.append(f'		return errors.New(ErrorNoUpdateArgs)\n')
        f_list.append(f'	}}\n')
        f_list.append(f'	build.WriteString(strings.Join(sqlvals, ","))\n')
        f_list.append(f'	build.WriteString(fmt.Sprintf(" WHERE `id` =  %d", id))\n')
        f_list.append(f'	if _, err := r.db.Exec(build.String()); err != nil {{\n')
        f_list.append(f'		logger.Error(err)\n')
        f_list.append(f'		return err\n')
        f_list.append(f'	}}\n')
        f_list.append(f'	return nil\n')
        f_list.append(f'}}\n')
        f_list.append(f'\n')
        f_list.append(f'// @title: Get\n')
        f_list.append(f'// @description: 获取资源表一条数据\n')
        f_list.append(f'// @author: rong 2022/03/02\n')
        f_list.append(f'// @param: id int 要查询的资源Id\n')
        f_list.append(f'// @return *Resource 资源详情结构体\n')
        f_list.append(f'//         err error 错误或者无错误就是成功\n')
        f_list.append(f'func (r *ResourceRepo) Get(id int) (*Resource, error) {{\n')
        f_list.append(f'	var resp []Resource\n')
        f_list.append(f'	sqlStr := fmt.Sprintf("SELECT * FROM `resources` WHERE id = %d", id)\n')
        f_list.append(f'\n')
        f_list.append(f'	out, err := r.db.Query(sqlStr)\n')
        f_list.append(f'	if err != nil {{\n')
        f_list.append(f'		return nil, err\n')
        f_list.append(f'	}}\n')
        f_list.append(f'	err = json.Unmarshal(out.Data, &resp)\n')
        f_list.append(f'	if err != nil {{\n')
        f_list.append(f'		return nil, err\n')
        f_list.append(f'	}}\n')
        f_list.append(f'	if len(resp) < 1 {{\n')
        f_list.append(f'		return nil, errors.New(ErrorNotFound)\n')
        f_list.append(f'	}}\n')
        f_list.append(f'\n')
        f_list.append(f'	var action map[string]interface{{}}\n')
        f_list.append(f'	err = json.Unmarshal([]byte(resp[0].Action.(string)), &action)\n')
        f_list.append(f'	if err != nil {{\n')
        f_list.append(f'		return nil, err\n')
        f_list.append(f'	}}\n')
        f_list.append(f'	resp[0].Action = action\n')
        f_list.append(f'\n')
        f_list.append(f'	return &resp[0], nil\n')
        f_list.append(f'}}\n')
        f_list.append(f'\n')
        f_list.append(f'// @title: List\n')
        f_list.append(f'// @description: 获取微信资源列表\n')
        f_list.append(f'// @author: rong 2022/02/14 11:48\n')
        f_list.append(f'// @param: query forms.ResourceQuery 请求资源分页表单\n')
        f_list.append(f'// @return int 列表数据总条数\n')
        f_list.append(f'//          []Resource  微信网页扫码登录配置结构数组\n')
        f_list.append(f'//          err error 错误或者无错误就是成功\n')
        f_list.append(f'func (r *ResourceRepo) List(query forms.ResourceQuery) (int, []Resource, error) {{\n')
        f_list.append(f'	var resp []Resource\n')
        f_list.append(f'	where := ""\n')
        f_list.append(f'	if len(query.Name) > 0 {{\n')
        f_list.append(f'		where = fmt.Sprintf(" WHERE NAME LIKE '%%%s%%'", query.Name)\n')
        f_list.append(f'	}}\n')
        f_list.append(f'\n')
        f_list.append(f'	countSql := fmt.Sprintf("SELECT count(id) AS count FROM resources%s", where)\n')
        f_list.append(f'	out, err := r.db.Query(countSql)\n')
        f_list.append(f'	if err != nil {{\n')
        f_list.append(f'		logger.Error(err)\n')
        f_list.append(f'		return 0, nil, err\n')
        f_list.append(f'	}}\n')
        f_list.append(f'	count := UnmarshalCount(out.Data)\n')
        f_list.append(f'	if count <= 0 {{\n')
        f_list.append(f'		return 0, resp, nil\n')
        f_list.append(f'	}}\n')
        f_list.append(f'\n')
        f_list.append(f'	offset := (query.Current - 1) * query.PerPage\n')
        f_list.append(f'	sqlstr := fmt.Sprintf("SELECT * FROM `resources` %s LIMIT %d, %d", where, offset, query.PerPage)\n')
        f_list.append(f'	out, err = r.db.Query(sqlstr)\n')
        f_list.append(f'\n')
        f_list.append(f'	if err != nil {{\n')
        f_list.append(f'		return 0, nil, err\n')
        f_list.append(f'	}}\n')
        f_list.append(f'	err = json.Unmarshal(out.Data, &resp)\n')
        f_list.append(f'	if err != nil {{\n')
        f_list.append(f'		return 0, nil, err\n')
        f_list.append(f'	}}\n')
        f_list.append(f'\n')
        f_list.append(f'	return count, resp, nil\n')
        f_list.append(f'}}\n')
        f_list.append(f'\n')
        f_list.append(f'// @title: Delete\n')
        f_list.append(f'// @description: 删除微信资源\n')
        f_list.append(f'// @param: ids []uint 资源ID切片\n')
        f_list.append(f'// @return err error 错误或者无错误就是成功\n')
        f_list.append(f'func (r *ResourceRepo) Delete(ids []uint) error {{\n')
        f_list.append(f'	idsStrList := ArrayUint2Str(ids)\n')
        f_list.append(f'	idsStr := strings.Join(idsStrList, ",")\n')
        f_list.append(f'	sqlstr := fmt.Sprintf("DELETE FROM `resources` WHERE `id` IN (%s)", idsStr)\n')
        f_list.append(f'\n')
        f_list.append(f'	_, err := r.db.Exec(sqlstr)\n')
        f_list.append(f'	if err != nil {{\n')
        f_list.append(f'		return err\n')
        f_list.append(f'	}}\n')
        f_list.append(f'	return nil\n')
        f_list.append(f'}}\n')
        f_list.append(f'\n')






















// @title: Update
// @description: 插入资源表一条数据
// @author: rong 2022/03/01
// @param: id int 资源ID
//         from froms.ResourceUpdateForm 资源修改表单
// @return err error 错误或者无错误就是成功
func (r *ResourceRepo) Update(id int, form forms.ResourceUpdateForm) error {
	var build strings.Builder
	build.WriteString("UPDATE `resources` SET ")

	var sqlvals []string

	if 0 < len(form.Name) {
		// 检查是否有重复元素
		out, err := r.db.Query(fmt.Sprintf("SELECT COUNT(id) AS COUNT FROM `resources` WHERE `id` != %s AND `name` = '%s'", id, form.Name))
		if err != nil {
			logger.Error(err)
			return err
		}
		if UnmarshalCount(out.Data) > 0 {
			return errors.New(ErrorExist)
		}

		sqlvals = append(sqlvals, fmt.Sprintf(" `name` = '%s' ", form.Name))
	}

	if 0 < len(form.Description) {
		sqlvals = append(sqlvals, fmt.Sprintf(" `description` = '%s' ", form.Description))
	}

	data, err := json.Marshal(form.Action)
	if err != nil {
		return err
	}
	var action string = string(data)
	if action == "null" {
		action = "{}"
	}
	sqlvals = append(sqlvals, fmt.Sprintf(" `action` = '%s' ", action))

	if len(sqlvals) == 0 {
		return errors.New(ErrorNoUpdateArgs)
	}
	build.WriteString(strings.Join(sqlvals, ","))
	build.WriteString(fmt.Sprintf(" WHERE `id` =  %s", id))
	if _, err := r.db.Exec(build.String()); err != nil {
		logger.Error(err)
		return err
	}
	return nil
}
